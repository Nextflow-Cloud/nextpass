class Internal():
    """Internal manage for nextpass. Basically handles the database and encrypted backups for Nextpass."""

    def __init__(self, password: str, token: str, server: str) -> None: ...

    def internet(self, host="8.8.8.8", port=53, timeout=3) -> bool:
        """
        Host: 8.8.8.8 (google-public-dns-a.google.com)
        OpenPort: 53/tcp
        Service: domain (DNS/TCP)
        """
        ...

    def id(self): ...

    def add_item(self, website: str, name: str, email: str, password: str, secret2fa = "", notes = "") -> int: ...

    def generatePassword(self, length: int, punctuation = True, digits = True) -> str: ...

    def passwordStrength(self, password: str) -> str: ...

    def passwordCheck(self, website: str, email: str) -> str: ...

    def search_email(self, website: str, email: str, plural=True, limit=100) -> list or tuple: ...

    def search_name(self, website: str, name: str, plural=True, limit=100) -> list or tuple: ...

    def fetch_all(self) -> list: ... #so its like .d.ts files in js
    # like a type declaration file

    def delete(self, website: str, email: str) -> None: ...

    def search(self, website: str, value: str, type: str, plural=True, limit=100) -> list or tuple: ...

    def clear_mem(self) -> None: ...

    def clear(self) -> None: ...

    def encrypt_db(self) -> None: ...

    def decrypt_db(self) -> None: ...

    def edit(self, id: str, **toset) -> None: ...

    def load_salt(self) -> bytes: ...

    def generate_salt(self) -> bytes: ...

    def validate(self) -> bool: ...

    def decrypt_data(self, data: list) -> list: ...

    def decrypt_datum(self, data_tuple: tuple) -> tuple: ...

    def download(self, url, headers, local_filename: str) -> str: ...

    def upload(self, server, headers, fileobj: dict) -> int: ...

    def is_downloadable(url, headers) -> bool: ...

    def getHash(self) -> None: ...

    def close(self) -> None: ...